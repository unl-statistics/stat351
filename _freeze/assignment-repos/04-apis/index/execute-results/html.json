{
  "hash": "a1bdbd2832e115f4983e8371e4e5fde1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab: Application Programming Interfaces\"\nauthor: \"Your Name Here\"\nformat: html\nnumber-sections: true\nnumber-depth: 2\n---\n\n\n\n::: callout\nYou can see the purpose of this assignment as well as the skills and knowledge you should be using and acquiring, in the [Transparency in Learning and Teaching (TILT)](tilt.qmd) document in this repository. The TILT document also contains a checklist for self-reflection that will provide some guidance on how the assignment will be graded. \n:::\n\n\n# Public API, No Authentication\n\nWhen working with APIs, you will often need to understand HTTP status codes. \nLuckily, there are APIs to help make this process more adorable! \nIn this task, you'll review HTTP response codes and practice using very simple APIs that do not require authentication.\n\n## HTTP Response Codes\n\nScrape the HTTP response descriptions provided at https://www.ibm.com/docs/en/zos-connect/3.0.0?topic=reference-http-response-code into a tabular object `resp_codes` that has columns `code`, `name`, and `description`. \n\n> Code chunk goes here\n\n## Fighting Like Cats and Dogs with APIs\n\nOften, 404 errors have custom pages that show an image specific to the site (or just more interesting than a text site that says 404 not found).\nThere are API services available to provide these images, and using these services to show response codes can make web development and web scraping much cuter.\n\nFor this exercise, pick either [dogs](https://http.dog/) or [cats](https://http.cat/). \n(You can also pick [goats](https://httpgoats.com/), [ducks](https://httpducks.com/), [gardens](https://http.garden/), [fish](https://http.fish), or [pizza](https://http.pizza/), if you prefer.)\nComplete the following tasks to make a reference sheet for each of your HTTP codes.\n\n### Saving the response images\n\n1. Use the `code` column and the API documentation to create a URL for each status code picture. Save the URLs in a `url` column.\n2. Create a folder to save the images into (`cats/`, `dogs/`, `pizza/`, etc. seems reasonable)\n3. Use functional programming to iterate through your `url` column and download the pictures to your folder, saving each image as `XXX.jpg` where `XXX` is the HTTP response code.\n\n### Introducing `glue` and f-strings\n\n- [Python f-string reference](https://realpython.com/python-f-strings/)\n- [`glue` R package reference](https://glue.tidyverse.org/)\n\nAs API calls get more complicated, it can be helpful to have a way to specify structured strings without pasting a bunch of stuff together. \nTo practice this, use your language of choice to generate markdown code to display each of the HTTP response code images you downloaded. \n\nEach image should have: \n\n- a caption\n- alt-text\n- an image ID\n\nAs a reminder, you can accomplish this using the following markdown syntax: \n\n     ![<caption>](<path-to-image>){#<id> fig-alt=\"alt-text to explain what the image is\"}\n\nCreate a formatted string that can be combined with your data to generate a complete image reference string. \nIndicate which columns in your data will be filled in to each placeholder in the string.\nMake sure to use your *local* image link when generating markdown image code, to reduce the load on the server. \n\n\n### Creating an Image Wall\n\nUse your strings from the previous problem to generate a quarto file that will display a wall of images by following these steps in order:\n\n1. Generate markdown code for each HTTP response code by filling in the placeholders\n2. Create a YAML header string to provide the information at the top of your quarto document, including a title, author, date, and output format (html or pdf). \n3. Create a start and end string that will define a [figure panel](https://quarto.org/docs/authoring/figures.html#figure-panels).\n4. Assemble your image codes into a single string, keeping in mind that there must be a blank line between each image for the figure panel syntax to work properly.\n5. Assemble the lines you have created into a coherent vector that will define the lines of a text file (e.g. YAMl, then start, then image codes, then end)\n6. Write the lines out to `http-codes.qmd`.\n7. Compile your http-codes.qmd file and ensure that it works! You can use the `quarto::render()` function if you want to do this within this document.\n\n\n\n<!-- change me to python if you so desire -->\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1\n\n# Step 2\n\n# Step 3\n\n# Step 4\n\n# Step 5\n\n# Step 6\n\n# Step 7\n```\n:::\n\n\n\n\n# APIs with Authentication\n\nIt can be challenging to schedule events while accommodating the numerous national and religious holidays which occur during the fall and winter months. \nMany religious holidays are determined on the lunar calendar, which means that they hit on different dates each year. \nIn addition, the Orthodox church uses the Julian calendar for religious holidays instead of thee Gregorian calendar which is more common in the Western world. \n\nYour task will be to develop a calendar which represents the major religious and national holidays that must be scheduled around. \n\n## Register for Calendarific\n\nThe Calendarific API (https://calendarific.com/api-documentation) allows 500 - 1000 requests per day for free accounts.\nRegister for a free account (you can use your GitHub login for simplicity) and acquire your API key. \n\nUse an environment file (`.Renviron` or `.env`) to store your API key in an environment variable named `CALENDARIFIC_API_KEY`. \nAdd your environment file to the `.gitignore` file in this repository to ensure that you do not accidentally push it to git, exposing your API key to the world.\nAdd the `.gitignore` file and push it to the repository. \n\nTake a screenshot of your working directory to show that you've created your environment file correctly, and include it here.\n\n> Screenshot goes here\n\n\nAlso, load your environment variables (restart your R session, load the `python-dotenv` package, etc.) and determine how many characters are in your API key.\nInclude the code you used to do this, but set `eval: false` as an [execution option](https://quarto.org/docs/computations/execution-options.html#output-options) for the chunk.\n\n> Chunk goes here\n\n\n\n> There are ... characters in my API key\n\nWhen this homework is compiled on my machine, I will use my own API key, constructed in the same way, to run your code. If you did not follow the instructions exactly, it will not work. \n\n\n## October Holidays\n\nRead the API documentation and construct a query that will get all US holidays in October for this calendar year. \nRun the query in R or Python and store the query response in an `oct_holidays` object.\nWrite out the response to a file and commit it to the repository. \nWrap your API call in code which will check for the presence of the file and only make an API call if the file does not exist.\n\nNote: An .Rdata file is fine if you're using R. I've included `save-object.py` to write out an object in a binary file in Python. It's important to not write out your request to a plain-text readable format because the request will likely contain your API key, which you want to keep confidential. \n\n\n\n---\n\n> Code here\n\n---\n\nWhy is it important to minimize redundant API calls to the server by saving the request file?\n\n> Your answer\n\n---\n\n## Formatting JSON Data\n\nAcquire the request response body as a JSON file. \nSave the JSON file to your directory as `oct-holidays.json`. \n\nUse your data tidying skills to format the data in a rectangular format with minimal nesting (you can allow nesting in the states variables to keep the data in a relatively compact form). \nDates should be stored as dates and not characters. \n\nHint: When you are finished, your data should have at least the columns `name, description, country_id, country_name, date, type, canonical_url, locations, states`, and of these, only states should be a complex type. \n\n## State Holidays\n\nCreate separate data structures for holidays which are celebrated in all US states, and holidays which are celebrated only in some states. \nUnnest the states column in each data set before merging them back together (you may want to rename the `states` column in the national holiday dataset to more appropriately match the state dataset). \n\n> Code\n\n\n## Holiday List\n\nUsing this combined dataset, create a properly formatted markdown table of all state, national, or religious holidays which are celebrated either nationally or within Nebraska during October, sorted by date (include only necessary columns - name, date, type). \nInclude only one entry for each holiday -- if something is both a national and local holiday, include only the national version. \nYou should exclude UN observances (other than World Statistics Day!), Sporting events,  and Worldwide observances.\n\n> Code that outputs the markdown table\n\n## Date Sequences\n\nSome holidays occur over a longer period -- for example, the Jewish holiday of Sukkot lasts for about a week. \nCalenderific includes the first and last days of Sukkot, but does not include the intermediate period.\nWrite a function, `long_holiday(data, \"name\")` that looks for \"First Day of <pattern>\" and \"Last Day of <pattern>\" entries in `data$name` and fills in the additional days, labeling all of the days with the holiday name (\"<pattern>\"). \nTest your function to ensure that it works for October.\n\n## Scheduling An Event\n\nSuppose you want to schedule an event to occur during the fall semester. \nYou want to be sensitive to religious holidays (you don't have to decide whether a holiday is important enough for someone to miss the event to celebrate, which gets sticky), as well as events like time changes and national/state holidays. \nIn addition, you also want to be sensitive to those who are religious, so you want to avoid holding your event on Saturday or Sunday. \n()) + 1\nRequest all holidays and determine what the safe dates are to hold your event.\nYou may hard-code the dates when classes are in session for the semester, or just use the values directly in a filter statement. \n\nShow the safe days using an appropriate plot. The `calendR` package may be useful, or you can use `lubridate` to get the necessary information to plot the calendar in `ggplot2`.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}