{
  "hash": "2a1454a4e93ee4c479a2f215a235d721",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"APIs\"\nformat: \n    revealjs:\n        navigation-mode: vertical\n        logo: deps/unl/N.svg\n        theme: deps/unl/inverse.scss\n        css: deps/unl/styles.css\n        includes:\n          in_header: deps/unl/header.html\n        lib_dir: libs\n---\n\n\n\n\n## URL Anatomy {.scrollable .smaller}\n\n$$\\underbrace{\\text{https}}_{scheme}\\text{://}\\underbrace{\\text{archive.org}}_{endpoint}/\\underbrace{\\text{wayback/available}}_{path}?\\underbrace{\\text{url=nyt.com}}_{query}$$\n\n$$\\underbrace{\\text{https}}_{scheme}\\text{://}\\underbrace{\\text{srvanderplas.github.io}}_{endpoint}\\text{/}\\underbrace{\\text{stat-computing-r-python/part-advanced-topics/05-APIs.html}}_{path}\\underbrace{\\text{#http-response-codes}}_{fragment}$$\n\n\n## URL Anatomy {.scrollable .smaller}\n\n$$\\begin{align}\nscheme                                  &\\ \\ \\   \\text{https}\\text{://}\\\\\nendpoint                                &\\ \\ \\ \\text{www.google.com}\\\\\npath                                    &\\ \\ \\  \\text{/search} \\\\\nmy\\ actual\\ query                       &\\ \\ \\  \\text{?q=parts+of+a+url} \\\\\npossibly\\ experiment\\ version\\ info??   &\\ \\ \\  \\text{&sca_esv=d64738122a810e98} \\\\\ninitiated\\ via\\ homepage                &\\ \\ \\  \\text{&source=hp}\\\\\nengine\\ identifier\\ (meaning\\ unknown)  &\\ \\ \\  \\text{&ei=aKPQaLvEMrmw0...}\\\\\ninternal\\ link\\ tracking\\ info          &\\ \\ \\  \\text{&ved=0ahUKEwi7mLm...}\\\\\nmy\\ query\\ again?                       &\\ \\ \\  \\text{&oq=parts+of+a+url}\\\\\nGoogle\\ Web\\ Search\\ Wizard             &\\ \\ \\  \\text{&sclient=gws-wiz} \\end{align}$$\n<!-- \\text{&gs_lp=Egdnd3Mtd2l6Ig5wYXJ0cyBvZiBhIHVybDIFEAAYgAQyBRAAGIAEMgUQABiABDIFEAAYgAQyBRAAGIAEMgUQABiABDIFEAAYgAQyBRAAGIAEMgUQABiABDILEAAYgAQYhgMYigVIqxZQAFi-C3AAeACQAQCYAW-gAfcJqgEEMTEuM7gBA8gBAPgBAZgCDqACogrCAg4QLhiABBixAxjRAxjHAcICDhAuGIAEGLEDGIMBGIoFwgILEAAYgAQYsQMYgwHCAgsQLhiABBjRAxjHAcICERAuGIAEGLEDGNEDGIMBGMcBwgIOEAAYgAQYsQMYgwEYigXCAgsQLhiABBixAxiDAcICDhAuGIAEGMcBGI4FGK8BwgILEAAYgAQYsQMYyQPCAgsQABiABBiSAxiKBcICCxAuGIAEGMcBGK8BwgIOEC4YgAQYsQMYxwEYrwHCAhEQLhiABBixAxjRAxjHARiKBcICCBAAGIAEGJIDwgIIEAAYgAQYsQOYAwCSBwQxMS4zoAfzhQGyBwQxMS4zuAeiCsIHBTAuOC42yAcm} & base64\\ encoded\\ search\\ query\\ and\\ client\\ info??\\\\ -->\n\n[Guide to Google search parameters](https://serpapi.com/blog/google-search-parameters/#the-q-parameter)\n\n## APIs without Authentication {.scrollable .smaller}\n\n::: panel-tabset\n### R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr2)\nlibrary(dplyr)\nlibrary(jsonlite)\nurl <- \"https://openlibrary.org/search.json?q=the+lord+of+the+rings\"\n\nres <- request(url) |>\n  req_perform()\nres\n\ntmp <- res |> resp_body_string() |> fromJSON()\n# tmp[1:7]\ntmp$docs |> select(author_key, author_name, title) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   author_key                      author_name\n1    OL26320A                   J.R.R. Tolkien\n2    OL26320A                   J.R.R. Tolkien\n3    OL26320A                   J.R.R. Tolkien\n4    OL26320A                   J.R.R. Tolkien\n5    OL26320A                   J.R.R. Tolkien\n6 OL10330532A The Lord Of The Rings Publishing\n                                         title\n1                        The Lord of the Rings\n2                   The Fellowship of the Ring\n3                               The Two Towers\n4                       The Return of the King\n5          Novels (Hobbit / Lord of the Rings)\n6 Official the lôrd of the Rîngs 2022 Calendar\n```\n\n\n:::\n:::\n\n\n\n### Python\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport requests\nimport pandas as pd\n\nurl = \"https://openlibrary.org/search.json?q=the+lord+of+the+rings\"\nreq = requests.get(url)\nres = req.json()\npd.DataFrame.from_dict(res['docs']).head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   author_key       author_name  ...                                title  subtitle\n0  [OL26320A]  [J.R.R. Tolkien]  ...                The Lord of the Rings       NaN\n1  [OL26320A]  [J.R.R. Tolkien]  ...           The Fellowship of the Ring       NaN\n2  [OL26320A]  [J.R.R. Tolkien]  ...                       The Two Towers       NaN\n3  [OL26320A]  [J.R.R. Tolkien]  ...               The Return of the King       NaN\n4  [OL26320A]  [J.R.R. Tolkien]  ...  Novels (Hobbit / Lord of the Rings)       NaN\n\n[5 rows x 17 columns]\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n\n## API key authentication\n\n\n::: panel-tabset\n### R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr2)\nlibrary(dplyr)\nlibrary(jsonlite)\napi_key <- 1 # Test key for educational purposes\nbase <- \"http://www.themealdb.com/api/json/v1/\"\nquery <- \"/search.php?s=Pizza\"\n\nurl <- paste0(base, api_key, query)\n\n\nres <- request(url) |>\n  req_perform()\nres\n\ntmp <- res |> resp_body_string() |> parse_json()\n```\n:::\n\n\n\n### Python\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport requests\nimport pandas as pd\napi_key = 1 # Test key for educational purposes\nbase = \"http://www.themealdb.com/api/json/v1/\"\nquery = \"/search.php?s=Pizza\"\nurl = base + str(api_key) + query\nreq = requests.get(url)\nres = req.json()\nres\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{'meals': [{'idMeal': '53014', 'strMeal': 'Pizza Express Margherita', 'strMealAlternate': None, 'strCategory': 'Miscellaneous', 'strArea': 'Italian', 'strInstructions': '1 Preheat the oven to 230°C.\\r\\n\\r\\n2 Add the sugar and crumble the fresh yeast into warm water.\\r\\n\\r\\n3 Allow the mixture to stand for 10 – 15 minutes in a warm place (we find a windowsill on a sunny day works best) until froth develops on the surface.\\r\\n\\r\\n4 Sift the flour and salt into a large mixing bowl, make a well in the middle and pour in the yeast mixture and olive oil.\\r\\n\\r\\n5 Lightly flour your hands, and slowly mix the ingredients together until they bind.\\r\\n\\r\\n6 Generously dust your surface with flour.\\r\\n\\r\\n7 Throw down the dough and begin kneading for 10 minutes until smooth, silky and soft.\\r\\n\\r\\n8 Place in a lightly oiled, non-stick baking tray (we use a round one, but any shape will do!)\\r\\n\\r\\n9 Spread the passata on top making sure you go to the edge.\\r\\n\\r\\n10 Evenly place the mozzarella (or other cheese) on top, season with the oregano and black pepper, then drizzle with a little olive oil.\\r\\n\\r\\n11 Cook in the oven for 10 – 12 minutes until the cheese slightly colours.\\r\\n\\r\\n12 When ready, place the basil leaf on top and tuck in!', 'strMealThumb': 'https://www.themealdb.com/images/media/meals/x0lk931587671540.jpg', 'strTags': None, 'strYoutube': 'https://www.youtube.com/watch?v=Mt5lgUZRoUg', 'strIngredient1': 'Water', 'strIngredient2': 'Sugar', 'strIngredient3': 'Yeast', 'strIngredient4': 'Plain Flour', 'strIngredient5': 'Salt', 'strIngredient6': 'Olive Oil', 'strIngredient7': 'Passata', 'strIngredient8': 'Mozzarella', 'strIngredient9': 'Oregano', 'strIngredient10': 'Basil', 'strIngredient11': 'Black Pepper', 'strIngredient12': '', 'strIngredient13': '', 'strIngredient14': '', 'strIngredient15': '', 'strIngredient16': '', 'strIngredient17': '', 'strIngredient18': '', 'strIngredient19': '', 'strIngredient20': '', 'strMeasure1': '150ml', 'strMeasure2': '1 tsp ', 'strMeasure3': '15g', 'strMeasure4': '225g', 'strMeasure5': '1 1/2 tsp ', 'strMeasure6': 'Drizzle', 'strMeasure7': '80g', 'strMeasure8': '70g', 'strMeasure9': 'Peeled and Sliced', 'strMeasure10': 'Leaves', 'strMeasure11': 'Pinch', 'strMeasure12': ' ', 'strMeasure13': ' ', 'strMeasure14': ' ', 'strMeasure15': ' ', 'strMeasure16': ' ', 'strMeasure17': ' ', 'strMeasure18': ' ', 'strMeasure19': ' ', 'strMeasure20': ' ', 'strSource': 'https://www.dailymail.co.uk/femail/food/article-8240361/Pizza-Express-release-secret-recipe-Margherita-Pizza-make-home.html', 'strImageSource': None, 'strCreativeCommonsConfirmed': None, 'dateModified': None}]}\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n\n## API key authentication\n\n- Generally, you'll need to sign up to obtain an API key\n- Read the documentation to figure out how to pass in the key\n    - as part of the query string\n    - in an HTTP header value such as `apiKey`\n    - as part of the path (prev example)\n\n## Your Turn {.inverse}\n\n- Pick one of the APIs at the end of the chapter in the textbook\n\n- Read the documentation\n\n- See what data you can pull out of it\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}